<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Java on Nicholas Zhan</title><link>https://zhannicholas.github.io/posts/java/</link><description>Recent content in Java on Nicholas Zhan</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Fri, 27 Aug 2021 22:22:46 +0800</lastBuildDate><atom:link href="https://zhannicholas.github.io/posts/java/index.xml" rel="self" type="application/rss+xml"/><item><title>Java 中的 hashCode() 与 equals()</title><link>https://zhannicholas.github.io/posts/java/java_lang/java-hashcode-equals-contracts/</link><pubDate>Fri, 27 Aug 2021 22:22:46 +0800</pubDate><guid>https://zhannicholas.github.io/posts/java/java_lang/java-hashcode-equals-contracts/</guid><description>有一道经典的 Java 面试题叫：重写了 equals()，为什么还要重写 hashCode()？ 不幸的是，笔者最近也被问到这个问题的变种了。当时面试官的</description></item><item><title>Spring Boot 中的配置体系</title><link>https://zhannicholas.github.io/posts/java/spring/configurations-in-spring-boot/</link><pubDate>Fri, 27 Aug 2021 20:36:10 +0800</pubDate><guid>https://zhannicholas.github.io/posts/java/spring/configurations-in-spring-boot/</guid><description>开发的同学可能都遇到过一个 Spring Boot 应用要在多个环境上部署，而每个环境的配置都不同的情况。比如，开发环境用一套配置，测试环境用另一套配置，生产环境</description></item><item><title>Spring Ioc</title><link>https://zhannicholas.github.io/posts/java/spring/spring-ioc/</link><pubDate>Sat, 21 Aug 2021 13:49:54 +0800</pubDate><guid>https://zhannicholas.github.io/posts/java/spring/spring-ioc/</guid><description>Ioc（Inverse of Control），又叫 DI（Dependence Injection）。它是这样一个过程：对象声明自己的依赖，然后容器</description></item><item><title>Java 中的引用与对象可达性</title><link>https://zhannicholas.github.io/posts/java/java_lang/references_and_reachability_in_java/</link><pubDate>Tue, 20 Apr 2021 21:40:00 +0800</pubDate><guid>https://zhannicholas.github.io/posts/java/java_lang/references_and_reachability_in_java/</guid><description>JDK 1.2 之后，Java 将引用分为强引用（Strongly Reference）、软引用（Soft Reference）、弱引用（Weak Refere</description></item><item><title>JDBC</title><link>https://zhannicholas.github.io/posts/java/jdbc/jdbc/</link><pubDate>Sun, 18 Apr 2021 23:00:39 +0800</pubDate><guid>https://zhannicholas.github.io/posts/java/jdbc/jdbc/</guid><description>JDBC（Java DataBase Connectivity）是 Java 程序与关系型数据库交互的统一 API，它由两部分 API 组成： 面向 Java 开发者的 Java API，这一部分 API 独</description></item><item><title>Java 代理</title><link>https://zhannicholas.github.io/posts/java/java_lang/proxy/</link><pubDate>Sun, 13 Dec 2020 18:25:38 +0800</pubDate><guid>https://zhannicholas.github.io/posts/java/java_lang/proxy/</guid><description>Wikipedia 中是这样描述 Proxy 的： A proxy, in its most general form, is a class functioning as an interface to something else. The proxy could interface to anything: a network connection, a large object in memory, a file, or some other resource that is expensive or impossible to duplicate. In short, a proxy is a wrapper or agent object that is being called by the</description></item><item><title>反射</title><link>https://zhannicholas.github.io/posts/java/java_lang/reflection/</link><pubDate>Sun, 13 Dec 2020 18:22:56 +0800</pubDate><guid>https://zhannicholas.github.io/posts/java/java_lang/reflection/</guid><description>反射(Reflection) 是Java语言的一大特性，它允许Java程序在运行过程中获取自身的相关信息，还能改变程序的内部属性。我们可以使用</description></item><item><title>Cloning Objects</title><link>https://zhannicholas.github.io/posts/java/java_lang/cloning_objects/</link><pubDate>Sun, 13 Dec 2020 18:19:11 +0800</pubDate><guid>https://zhannicholas.github.io/posts/java/java_lang/cloning_objects/</guid><description>通过克隆（Clone），我们可以快速构建出一个已有对象的副本。 浅克隆 VS 深克隆 浅克隆（Shadow Clone） 或 浅复制（Shallow Copy</description></item><item><title>Nested Classes</title><link>https://zhannicholas.github.io/posts/java/java_lang/nested_classes/</link><pubDate>Sun, 13 Dec 2020 18:18:04 +0800</pubDate><guid>https://zhannicholas.github.io/posts/java/java_lang/nested_classes/</guid><description>Java允许我们在一个类中定义另一个类，后者被称为嵌套类（nested class）。嵌套类可以分为两种： 静态内部类（static nested class</description></item></channel></rss>