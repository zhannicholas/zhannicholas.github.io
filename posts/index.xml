<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>博客 on Nicholas Zhan</title><link>https://zhannicholas.github.io/posts/</link><description>Recent content in 博客 on Nicholas Zhan</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Sat, 18 Sep 2021 22:34:56 +0800</lastBuildDate><atom:link href="https://zhannicholas.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>gPRC 与 Protocol Buffers</title><link>https://zhannicholas.github.io/posts/communication/gprc-and-protocol-buffers/</link><pubDate>Sat, 18 Sep 2021 22:34:56 +0800</pubDate><guid>https://zhannicholas.github.io/posts/communication/gprc-and-protocol-buffers/</guid><description>最近工作中需要用到 gPRC，赶紧学了一下，顺便做了些笔记。 gPRC 与 Protocol Buffers 经常一起使用，二者的关系非常密切。因为 gPRC 不仅将 Protocol Buffers 作为自己的 IDL（Int</description></item><item><title>Redis 中的 key 过期与淘汰机制</title><link>https://zhannicholas.github.io/posts/redis/key_expiration_and_eviction_in_redis/</link><pubDate>Thu, 19 Aug 2021 09:52:38 +0800</pubDate><guid>https://zhannicholas.github.io/posts/redis/key_expiration_and_eviction_in_redis/</guid><description>作为一个内存数据库，Redis 的容量肯定是有限的。如果 Redis 允许我们不断写入数据而又不作任何清理工作的话，内存迟早要被耗尽。此外，若我们在 Redis 中创</description></item><item><title>英语中的时间表达：AM 与 PM</title><link>https://zhannicholas.github.io/posts/english/am_and_pm/</link><pubDate>Wed, 18 Aug 2021 21:20:33 +0800</pubDate><guid>https://zhannicholas.github.io/posts/english/am_and_pm/</guid><description>相信大家都知道，我们在英语中一般用 AM（或 A.M.）表示上午，用 PM（或 P.M.）表示下午。当然，这一点我也知道。不仅如此，笔者还天真的认为</description></item><item><title>数据库规范化</title><link>https://zhannicholas.github.io/posts/databases/database_normalization/</link><pubDate>Thu, 29 Jul 2021 16:16:11 +0800</pubDate><guid>https://zhannicholas.github.io/posts/databases/database_normalization/</guid><description>在关系数据库设计中，数据库规范化（Database normalization） 是一个非常重要的概念。一般而言，关系数据库设计的目标是生成一组</description></item><item><title>Linux 中的硬链接与软链接</title><link>https://zhannicholas.github.io/posts/linux/links_in_the_linux_filesystem/</link><pubDate>Tue, 27 Jul 2021 10:46:48 +0800</pubDate><guid>https://zhannicholas.github.io/posts/linux/links_in_the_linux_filesystem/</guid><description>在 Linux 中，有一个东西叫链接文件，它有点像 Windows 中的快捷方式，可以很方便地实现文件的共享。链接主要分为两种：硬链接（hard link） 和 软连接（so</description></item><item><title>Linux 目录结构</title><link>https://zhannicholas.github.io/posts/linux/linux_directory_structure/</link><pubDate>Sat, 24 Jul 2021 21:57:59 +0800</pubDate><guid>https://zhannicholas.github.io/posts/linux/linux_directory_structure/</guid><description>在平常使用 Linux 的过程中，总感觉各个目录的作用存在某种约定，似乎大家都将程序放在 /bin、/sbin、/usr/bin 或 usr/sbin 下，将配置文件放到 /etc 下</description></item><item><title>Linux/Unix 中的文件类型</title><link>https://zhannicholas.github.io/posts/linux/file_types_in_linux_or_unix/</link><pubDate>Thu, 22 Jul 2021 09:20:30 +0800</pubDate><guid>https://zhannicholas.github.io/posts/linux/file_types_in_linux_or_unix/</guid><description>在 Windows 中，文件类型是根据扩展名来确定的。例如：a.pdf 是一个 pdf 文件，而 b.txt 是一个 txt 文件。但在 Linux/Unix 中，文件类型与文件扩展名没有关系，它们是两个完全</description></item><item><title>Redis中的事务</title><link>https://zhannicholas.github.io/posts/redis/redis_transactions/</link><pubDate>Sun, 13 Dec 2020 17:52:50 +0800</pubDate><guid>https://zhannicholas.github.io/posts/redis/redis_transactions/</guid><description>Redis中提供了5个和事务相关的命令：MULTI、EXEC、DISCARD、**WATCH key [key ...]**和 UNWATCH。Redis事务</description></item><item><title>Redis Streams</title><link>https://zhannicholas.github.io/posts/redis/redis_streams/</link><pubDate>Sun, 13 Dec 2020 17:49:38 +0800</pubDate><guid>https://zhannicholas.github.io/posts/redis/redis_streams/</guid><description>作为Redis 5.0中推出的全新数据结构，stream的行为就像append-only log一样，但它由基数树(radix tree)实现。s</description></item><item><title>Redis数据结构</title><link>https://zhannicholas.github.io/posts/redis/redis_datastructures/</link><pubDate>Sun, 13 Dec 2020 17:47:33 +0800</pubDate><guid>https://zhannicholas.github.io/posts/redis/redis_datastructures/</guid><description>Redis的键是一个字符串。在Redis中，字符串二进制安全的，也就是说：Redis中的字符串可以是任何二进制序列，即可以是任何类型的数据(</description></item><item><title>Publish/Subscribe</title><link>https://zhannicholas.github.io/posts/redis/publish_subscribe/</link><pubDate>Sun, 13 Dec 2020 17:45:33 +0800</pubDate><guid>https://zhannicholas.github.io/posts/redis/publish_subscribe/</guid><description>Redis通过 PUBLISH、**SUBSCRIBE**等命令实现了发布-订阅模式，这个功能提供了两种信息机制：simple syndicat</description></item><item><title>Redis Lua 脚本</title><link>https://zhannicholas.github.io/posts/redis/lua_scripting/</link><pubDate>Sun, 13 Dec 2020 17:41:46 +0800</pubDate><guid>https://zhannicholas.github.io/posts/redis/lua_scripting/</guid><description>Redis支持在服务端使用Lua解释器执行Lua脚本。Redis本身已经提供了非常多的命令，而Lua脚本可以帮助我们使用Lua提供的语言特性</description></item><item><title>Jedis</title><link>https://zhannicholas.github.io/posts/redis/jedis/</link><pubDate>Sun, 13 Dec 2020 17:40:18 +0800</pubDate><guid>https://zhannicholas.github.io/posts/redis/jedis/</guid><description>Jedis是一个Java编写的Redis客户端，提供了完整的Redis API。Redis客户端通常需要具备三种能力：管理Redis连接、实现</description></item><item><title>事务</title><link>https://zhannicholas.github.io/posts/databases/database_transactions/</link><pubDate>Sun, 13 Dec 2020 17:35:30 +0800</pubDate><guid>https://zhannicholas.github.io/posts/databases/database_transactions/</guid><description>本文中绝大部分内容和图片都来自 High Performance Java Persistence: Get the most out of your persistence layer。 事务（Transaction） 是由一组读写操作组成的一个不可分割的执行单元，</description></item><item><title>初见Redis</title><link>https://zhannicholas.github.io/posts/redis/redis_at_first_sight/</link><pubDate>Wed, 25 Sep 2019 19:24:06 +0800</pubDate><guid>https://zhannicholas.github.io/posts/redis/redis_at_first_sight/</guid><description>Redis是一个位于内存中的数据结构存储系统，由 ANSI C 语言编写。可用作数据库、缓存和消息中间件。它支持的数据结构有：string、hash、l</description></item><item><title>Linux添加用户并授予root权限的简单方法</title><link>https://zhannicholas.github.io/posts/linux/linux%E6%B7%BB%E5%8A%A0%E7%94%A8%E6%88%B7%E5%B9%B6%E6%8E%88%E4%BA%88root%E6%9D%83%E9%99%90%E7%9A%84%E7%AE%80%E5%8D%95%E6%96%B9%E6%B3%95/</link><pubDate>Wed, 13 Feb 2019 16:29:45 +0800</pubDate><guid>https://zhannicholas.github.io/posts/linux/linux%E6%B7%BB%E5%8A%A0%E7%94%A8%E6%88%B7%E5%B9%B6%E6%8E%88%E4%BA%88root%E6%9D%83%E9%99%90%E7%9A%84%E7%AE%80%E5%8D%95%E6%96%B9%E6%B3%95/</guid><description>快速方法 使用root操作 Step 1: 添加一个用户 adduser username Step 2: 授予root权限 usermod -aG sudo username 但是&amp;hellip;&amp;hellip; 有些时候，这并不管用 在vultr</description></item><item><title>完全平方数</title><link>https://zhannicholas.github.io/posts/leetcode/perfect-squares/</link><pubDate>Tue, 07 Aug 2018 07:15:52 +0800</pubDate><guid>https://zhannicholas.github.io/posts/leetcode/perfect-squares/</guid><description>这是Leetcoce上的第279个问题，解题的方法很有启发意义，以此备忘。 题目描述 给定正整数 n，找到若干个完全平方数（比如 1, 4, 9, 16, &amp;hell</description></item><item><title>寻找数组中的第K个最大的元素</title><link>https://zhannicholas.github.io/posts/leetcode/%E5%AF%BB%E6%89%BE%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E7%AC%ACk%E4%B8%AA%E6%9C%80%E5%A4%A7%E7%9A%84%E5%85%83%E7%B4%A0/</link><pubDate>Fri, 20 Jul 2018 10:33:07 +0800</pubDate><guid>https://zhannicholas.github.io/posts/leetcode/%E5%AF%BB%E6%89%BE%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E7%AC%ACk%E4%B8%AA%E6%9C%80%E5%A4%A7%E7%9A%84%E5%85%83%E7%B4%A0/</guid><description>这是Leetcode上的第215题：数组中的第k个最大元素。 问题描述 在未排序的数组中找到第 k 个最大的元素。请注意，你需要找的是数组排序后的第</description></item><item><title>荷兰国旗问题</title><link>https://zhannicholas.github.io/posts/leetcode/%E8%8D%B7%E5%85%B0%E5%9B%BD%E6%97%97%E9%97%AE%E9%A2%98/</link><pubDate>Thu, 19 Jul 2018 22:15:46 +0800</pubDate><guid>https://zhannicholas.github.io/posts/leetcode/%E8%8D%B7%E5%85%B0%E5%9B%BD%E6%97%97%E9%97%AE%E9%A2%98/</guid><description>问题描述 荷兰国旗问题(Dutch national flag problem)是Dijkstra提出的一个经典的编程练习。原问题大概是这样说的： Dijkstra used the Dutch National Flag Problem* as a structured programming</description></item><item><title>北邮回忆</title><link>https://zhannicholas.github.io/posts/recyclebin/remember_bupt/</link><pubDate>Wed, 18 Jul 2018 08:26:18 +0800</pubDate><guid>https://zhannicholas.github.io/posts/recyclebin/remember_bupt/</guid><description>在北邮一年的交换学习已经结束。仔细想想我这一年，好像并没有什么值得一提的。在我的印象里，第一学期的大多数时间都花在了学校开设的课程上，总是在</description></item><item><title>配置Anaconda源</title><link>https://zhannicholas.github.io/posts/python/anaconda-source-configuration/</link><pubDate>Sat, 07 Jul 2018 09:38:08 +0800</pubDate><guid>https://zhannicholas.github.io/posts/python/anaconda-source-configuration/</guid><description>Anaconda 是一个 **python** 的发行版，可以用来管理 python** 的包和环境，同时它包含1000+的开源package。正如那句话一样：\ _The Most Trusted Distribution for Data Science_\ 还有一个没有包含那么</description></item><item><title>Git初探</title><link>https://zhannicholas.github.io/posts/git/git_at_first_sight/</link><pubDate>Wed, 30 May 2018 15:56:02 +0800</pubDate><guid>https://zhannicholas.github.io/posts/git/git_at_first_sight/</guid><description>开始 文件的三种状态 已提交(committed) 数据已经安全的保存在了本地的数据库中 已修改(modified) 修改了文件，但还没保存到数据库中</description></item></channel></rss>