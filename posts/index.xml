<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on</title><link>https://zhannicholas.github.io/posts/</link><description>Recent content in Posts on</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Fri, 10 Mar 2023 21:38:42 +0800</lastBuildDate><atom:link href="https://zhannicholas.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>浏览器的同源策略</title><link>https://zhannicholas.github.io/posts/web/same_origin_policy/</link><pubDate>Fri, 10 Mar 2023 21:38:42 +0800</pubDate><guid>https://zhannicholas.github.io/posts/web/same_origin_policy/</guid><description>浏览器的同源策略（same-origin policy）是保障 Web 安全的一种重要机制，它规定了在一个源中加载的文档（document）或脚本（script）与来自不同源的其它文档或脚本进行交互的方式。只有同源的文档或脚本之间才可以相互交互。</description></item><item><title>理解 HTTP 中的 multipart/form-data</title><link>https://zhannicholas.github.io/posts/computer_networks/http/multipart_formdata/</link><pubDate>Fri, 10 Mar 2023 21:38:18 +0800</pubDate><guid>https://zhannicholas.github.io/posts/computer_networks/http/multipart_formdata/</guid><description>Multipart 允许客户端在一次 HTTP 请求中发送多个部分（part）数据，每部分数据之间的类型可以不同。通俗来讲，一个 multipart 消息就是一个大包裹，包裹里面有多个不同类型的消息，每一个消息就是一个 part，每个 part 都会声明自己的消息类型（Content-Type）。除了消息类型，part 还可以附加一些元数据。</description></item><item><title>Linux 进程状态</title><link>https://zhannicholas.github.io/posts/linux/process_states/</link><pubDate>Wed, 08 Mar 2023 19:26:27 +0800</pubDate><guid>https://zhannicholas.github.io/posts/linux/process_states/</guid><description>在这篇文章中，我们将学习 Linux 进程。我们会了解进程从创建到终止所经历地各种状态，以及这些状态之间的关系，进程是如何从一个状态进入另一个状态的。 最后，我们还会学习查看进程状态的两种命令。</description></item><item><title>Linux top 命令入门：前五行剖析</title><link>https://zhannicholas.github.io/posts/linux/first_five_lines_of_top_command/</link><pubDate>Tue, 07 Mar 2023 21:15:04 +0800</pubDate><guid>https://zhannicholas.github.io/posts/linux/first_five_lines_of_top_command/</guid><description>当 Linux 系统出现问题时，管理员常用 &lt;code>top&lt;/code> 命令来分析系统资源的消耗情况。&lt;code>top&lt;/code> 是一个大杀器，输出内容十分丰富，不仅有 CPU、内存等硬件资源的消耗情况，还有各种进程信息。</description></item><item><title>百度地图 Geohash 可视化</title><link>https://zhannicholas.github.io/posts/geography/baidumap_geohash_visualizer/</link><pubDate>Fri, 02 Dec 2022 20:45:02 +0800</pubDate><guid>https://zhannicholas.github.io/posts/geography/baidumap_geohash_visualizer/</guid><description>最近在百度地图上做基于位置的推荐服务，需要用到 geohash 和相关的可视化工具。由于不同地图厂商采用的坐标系不同，同一个位置在不同地图上的坐标会出现差异</description></item><item><title>理解 Geohash</title><link>https://zhannicholas.github.io/posts/geography/understanding_geohash/</link><pubDate>Sun, 27 Nov 2022 20:21:07 +0800</pubDate><guid>https://zhannicholas.github.io/posts/geography/understanding_geohash/</guid><description>Geohash 是 Gustavo Niemeyer 在 2008 年发明的一个地理编码系统（geocode system），它将经度和纬度这个二维的地理坐标编码成一个由数字和字母组成的字符串。虽然</description></item><item><title>Shell 脚本：I/O 重定向</title><link>https://zhannicholas.github.io/posts/linux/shell_scripting_io_redirection/</link><pubDate>Wed, 27 Oct 2021 22:26:55 +0800</pubDate><guid>https://zhannicholas.github.io/posts/linux/shell_scripting_io_redirection/</guid><description>文件输入和输出是通过整数句柄（integer handle）实现的——每个打开的文件都会被赋予一个数字，这个数字就是文件描述符（file des</description></item><item><title>Shell 脚本：正则表达式</title><link>https://zhannicholas.github.io/posts/linux/shell_scripting_regular_expressions/</link><pubDate>Wed, 27 Oct 2021 21:10:27 +0800</pubDate><guid>https://zhannicholas.github.io/posts/linux/shell_scripting_regular_expressions/</guid><description>正则表达式（regular expression, RE）在 Shell 中的应用非常广泛，我们常用的 find、grep、sed、awk 等命令都涉及到正则表达式…… 在 Shell 中，表达</description></item><item><title>Shell 脚本：shell 展开</title><link>https://zhannicholas.github.io/posts/linux/shell_scripting_shell_expansion/</link><pubDate>Sat, 23 Oct 2021 17:15:13 +0800</pubDate><guid>https://zhannicholas.github.io/posts/linux/shell_scripting_shell_expansion/</guid><description>Bash 和其它 shell 做的工作远不止执行命令那么简单。以下提到的各种展开（expansion）操作发生在 Bash 执行命令之前。准确来说，是在重定向之前，重定向</description></item><item><title>Shell 脚本：条件分支与循环</title><link>https://zhannicholas.github.io/posts/linux/shell_scripting_conditional_statements_and_loops/</link><pubDate>Thu, 21 Oct 2021 23:05:45 +0800</pubDate><guid>https://zhannicholas.github.io/posts/linux/shell_scripting_conditional_statements_and_loops/</guid><description>和其它编程语言类似，bash 也给我们提供了条件语句（conditional statements）。 条件分支 if 在 shell 中，if/then 的语法为：</description></item></channel></rss>