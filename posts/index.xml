<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on 's Digital Garden</title><link>https://zhannicholas.github.io/posts/</link><description>Recent content in Posts on 's Digital Garden</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Wed, 08 Mar 2023 19:26:27 +0800</lastBuildDate><atom:link href="https://zhannicholas.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Linux 进程状态</title><link>https://zhannicholas.github.io/posts/linux/process_states/</link><pubDate>Wed, 08 Mar 2023 19:26:27 +0800</pubDate><guid>https://zhannicholas.github.io/posts/linux/process_states/</guid><description>在这篇文章中，我们将学习 Linux 进程。我们会了解进程从创建到终止所经历地各种状态，以及这些状态之间的关系，进程是如何从一个状态进入另一个状态的。 最后，我们还会学习查看进程状态的两种命令。</description></item><item><title>百度地图 Geohash 可视化</title><link>https://zhannicholas.github.io/posts/geography/baidumap_geohash_visualizer/</link><pubDate>Fri, 02 Dec 2022 20:45:02 +0800</pubDate><guid>https://zhannicholas.github.io/posts/geography/baidumap_geohash_visualizer/</guid><description>最近在百度地图上做基于位置的推荐服务，需要用到 geohash 和相关的可视化工具。由于不同地图厂商采用的坐标系不同，同一个位置在不同地图上的坐标会出现差异</description></item><item><title>理解 Geohash</title><link>https://zhannicholas.github.io/posts/geography/understanding_geohash/</link><pubDate>Sun, 27 Nov 2022 20:21:07 +0800</pubDate><guid>https://zhannicholas.github.io/posts/geography/understanding_geohash/</guid><description>Geohash 是 Gustavo Niemeyer 在 2008 年发明的一个地理编码系统（geocode system），它将经度和纬度这个二维的地理坐标编码成一个由数字和字母组成的字符串。虽然</description></item><item><title>Shell 脚本：I/O 重定向</title><link>https://zhannicholas.github.io/posts/linux/shell_scripting_io_redirection/</link><pubDate>Wed, 27 Oct 2021 22:26:55 +0800</pubDate><guid>https://zhannicholas.github.io/posts/linux/shell_scripting_io_redirection/</guid><description>文件输入和输出是通过整数句柄（integer handle）实现的——每个打开的文件都会被赋予一个数字，这个数字就是文件描述符（file des</description></item><item><title>Shell 脚本：正则表达式</title><link>https://zhannicholas.github.io/posts/linux/shell_scripting_regular_expressions/</link><pubDate>Wed, 27 Oct 2021 21:10:27 +0800</pubDate><guid>https://zhannicholas.github.io/posts/linux/shell_scripting_regular_expressions/</guid><description>正则表达式（regular expression, RE）在 Shell 中的应用非常广泛，我们常用的 find、grep、sed、awk 等命令都涉及到正则表达式…… 在 Shell 中，表达</description></item><item><title>Shell 脚本：shell 展开</title><link>https://zhannicholas.github.io/posts/linux/shell_scripting_shell_expansion/</link><pubDate>Sat, 23 Oct 2021 17:15:13 +0800</pubDate><guid>https://zhannicholas.github.io/posts/linux/shell_scripting_shell_expansion/</guid><description>Bash 和其它 shell 做的工作远不止执行命令那么简单。以下提到的各种展开（expansion）操作发生在 Bash 执行命令之前。准确来说，是在重定向之前，重定向</description></item><item><title>Shell 脚本：条件分支与循环</title><link>https://zhannicholas.github.io/posts/linux/shell_scripting_conditional_statements_and_loops/</link><pubDate>Thu, 21 Oct 2021 23:05:45 +0800</pubDate><guid>https://zhannicholas.github.io/posts/linux/shell_scripting_conditional_statements_and_loops/</guid><description>和其它编程语言类似，bash 也给我们提供了条件语句（conditional statements）。 条件分支 if 在 shell 中，if/then 的语法为：</description></item><item><title>Shell 脚本：变量</title><link>https://zhannicholas.github.io/posts/linux/shell_scripting_variables/</link><pubDate>Wed, 20 Oct 2021 21:26:46 +0800</pubDate><guid>https://zhannicholas.github.io/posts/linux/shell_scripting_variables/</guid><description>Shell 脚本用变量（variable）来表示数据，变量仅仅只是一个标签（label），它实际上是一个引用（reference）或指针（pointe</description></item><item><title>Shell 脚本</title><link>https://zhannicholas.github.io/posts/linux/shell_scripting_introduction/</link><pubDate>Wed, 20 Oct 2021 20:45:55 +0800</pubDate><guid>https://zhannicholas.github.io/posts/linux/shell_scripting_introduction/</guid><description>接下来将会有一系列与 Shell 脚本相关的笔记文章。在之前的工作中，作为一个 Java Boy，我几乎不需要自己编写 Shell 脚本，所以大学学过的 Shell 脚本编程基本忘完（实</description></item><item><title>Rust 基础：错误处理</title><link>https://zhannicholas.github.io/posts/rust/rust_basics_error_handling/</link><pubDate>Wed, 29 Sep 2021 20:55:48 +0800</pubDate><guid>https://zhannicholas.github.io/posts/rust/rust_basics_error_handling/</guid><description>任何软件都不可避免地出现各种或大或小的 Bug，软件设计的一大目标就是软件的健壮性，而错误处理就是提高软件健壮性的一大利器。作为一门对安全比较</description></item></channel></rss>