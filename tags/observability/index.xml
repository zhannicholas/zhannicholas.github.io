<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Observability on NZ's Digital Garden</title><link>https://zhannicholas.github.io/tags/observability/</link><description>Recent content in Observability on NZ's Digital Garden</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Mon, 19 Sep 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://zhannicholas.github.io/tags/observability/index.xml" rel="self" type="application/rss+xml"/><item><title>Prometheus</title><link>https://zhannicholas.github.io/pages/prometheus/</link><pubDate>Mon, 19 Sep 2022 00:00:00 +0000</pubDate><guid>https://zhannicholas.github.io/pages/prometheus/</guid><description>Promethues is an open-source systems monitoring and alerting toolkit.
Promethues Operator The Prometheus Operator provides Kubernetes native deployment and management of Prometheus and related monitoring components.
Design The ServiceMonitor custom resource definition (CRD) allows to declaratively define how a dynamic set of services should be monitored.
The PodMonitor custom resource definition (CRD) allows to declaratively define how a dynamic set of pods should be monitored.
PodMonitor vs ServiceMonitor what is the difference?</description></item><item><title>Alerting</title><link>https://zhannicholas.github.io/pages/alerting/</link><pubDate>Thu, 01 Sep 2022 00:00:00 +0000</pubDate><guid>https://zhannicholas.github.io/pages/alerting/</guid><description>Best Practice for Alerting Monitoring data should at all times provide a bird’s-eye view of the overall health of a distributed system by recording and exposing high-level metrics over time across all components of the system.
Monitoring data should at all times provide a bird’s-eye view of the overall health of a distributed system by recording and exposing high-level metrics over time across all components of the system.
In the event of a failure, monitoring data should immediately be able to provide visibility into the impact of the failure as well as the effect of any fix deployed.</description></item><item><title>Monitoring</title><link>https://zhannicholas.github.io/pages/monitoring/</link><pubDate>Thu, 01 Sep 2022 00:00:00 +0000</pubDate><guid>https://zhannicholas.github.io/pages/monitoring/</guid><description>Monitoring is the practice of collecting metrics, logs, traces, and so on, aggregating them, and matching them against predefined criteria of system states that we should carefully watch.
Monitoring is a subset of Observability .
Blackbox and Whitebox Monitoring Blackbox monitoring refers to observing a system from the outside. It&amp;rsquo;s useful in being able to identify the symptoms of a problem, but not triggers that led to the problem.
Whitebox monitoring refers to techniques of reporting data from inside the system.</description></item><item><title>Observability</title><link>https://zhannicholas.github.io/pages/observability/</link><pubDate>Tue, 30 Aug 2022 00:00:00 +0000</pubDate><guid>https://zhannicholas.github.io/pages/observability/</guid><description>Observability is a superset of both monitoring and testing; it provides not only high-level overviews of the system&amp;rsquo;s health but also information about unpredictable failure modes that couldn’t be monitored for or tested.
Monitoring is best suited to report the overall health of systems and to derive alerts.
Three Pillars of Observability
Metrics are a measurement captured at regular intervals that represent an important element to the overall platform health.</description></item><item><title>The RED method</title><link>https://zhannicholas.github.io/pages/the-red-method/</link><pubDate>Tue, 30 Aug 2022 00:00:00 +0000</pubDate><guid>https://zhannicholas.github.io/pages/the-red-method/</guid><description>The RED Method: key metrics for microservices architecture (weave.works) .
The RED Method refers to the three key metrics you should measure for every microservice in your architecture. Those metrics are:
(Request) Rate - the number of requests, per second, you services are serving.
(Request) Errors - the number of failed requests per second.
(Request) Duration - distributions of the amount of time each request takes.
the RED method is 100% based on Google SRE.</description></item><item><title>The USE method</title><link>https://zhannicholas.github.io/pages/the-use-method/</link><pubDate>Tue, 30 Aug 2022 00:00:00 +0000</pubDate><guid>https://zhannicholas.github.io/pages/the-use-method/</guid><description>The USE Method (brendangregg.com) .
id:: 630eb70d-91e4-4f73-bde6-bdcacae9d3c6 The Utilization Saturation and Errors (USE) Method is a methodology for analyzing the performance of any system. It directs the construction of a checklist, which for server analysis can be used for quickly identifying resource bottlenecks or errors. It begins by posing questions, and then seeks answers, instead of beginning with given metrics (partial answers) and trying to work backwards. The USE Method is based on three metric types and a strategy for approaching a complex system.</description></item></channel></rss>