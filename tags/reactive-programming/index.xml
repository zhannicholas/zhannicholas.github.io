<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Reactive Programming on NZ's Digital Garden</title><link>https://zhannicholas.github.io/tags/reactive-programming/</link><description>Recent content in Reactive Programming on NZ's Digital Garden</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Thu, 28 Jul 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://zhannicholas.github.io/tags/reactive-programming/index.xml" rel="self" type="application/rss+xml"/><item><title>Project Reactor</title><link>https://zhannicholas.github.io/pages/project-reactor/</link><pubDate>Thu, 28 Jul 2022 00:00:00 +0000</pubDate><guid>https://zhannicholas.github.io/pages/project-reactor/</guid><description>Project Reactor implements Reactive Steams and abstracts steam definitions into two primary types: Flux and Mono.
Reactor Core Features Both Flux and Mono are implementations of Reactive Streams&amp;rsquo; Publisher.
Flux[N] A Flux&amp;lt;T&amp;gt; is a Reactive Streams Publisher which can emit 0 to n &amp;lt;T&amp;gt; elements (onNext event) then either completes or errors (onComplete and onError terminal events). If no terminal event is triggered, the Flux is infinite. Mono[0|1] A Mono is a specialization of Flux that can emit at most 1 &amp;lt;T&amp;gt; element: a Mono is either valued (complete with element), empty (complete without element) or failed (error).</description></item></channel></rss>