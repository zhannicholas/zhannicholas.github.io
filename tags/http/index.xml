<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>HTTP on</title><link>https://zhannicholas.github.io/tags/http/</link><description>Recent content in HTTP on</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Fri, 10 Mar 2023 21:38:18 +0800</lastBuildDate><atom:link href="https://zhannicholas.github.io/tags/http/index.xml" rel="self" type="application/rss+xml"/><item><title>理解 HTTP 中的 multipart/form-data</title><link>https://zhannicholas.github.io/posts/computer_networks/http/multipart_formdata/</link><pubDate>Fri, 10 Mar 2023 21:38:18 +0800</pubDate><guid>https://zhannicholas.github.io/posts/computer_networks/http/multipart_formdata/</guid><description>Multipart 允许客户端在一次 HTTP 请求中发送多个部分（part）数据，每部分数据之间的类型可以不同。通俗来讲，一个 multipart 消息就是一个大包裹，包裹里面有多个不同类型的消息，每一个消息就是一个 part，每个 part 都会声明自己的消息类型（Content-Type）。除了消息类型，part 还可以附加一些元数据。</description></item><item><title>HTTP3</title><link>https://zhannicholas.github.io/pages/http3/</link><pubDate>Tue, 30 Aug 2022 00:00:00 +0000</pubDate><guid>https://zhannicholas.github.io/pages/http3/</guid><description>Worth To Read HTTP/3 explained . HTTP/3 基于 QUIC 协议。QUIC 放弃了 TCP，转而采用 UDP，克服了 TCP 队头阻塞问题。在使用 QUIC 时，通信双方会建立一个连接。但是，连接上的各个</description></item><item><title>HTTP2</title><link>https://zhannicholas.github.io/pages/http2/</link><pubDate>Sun, 19 Jun 2022 00:00:00 +0000</pubDate><guid>https://zhannicholas.github.io/pages/http2/</guid><description>RFC RFC7540: Hypertext Transfer Protocol Version 2 (HTTP/2) . RFC8740: Using TLS1.3 with HTTP/2 . RFC9113: HTTP/2 . In particular, HTTP/1.0 allowed only one request to be outstanding at a time on a given TCP connection. HTTP/1.1 added request pipelining, but this only partially addressed request concurrency and still suffers from head-of-line blocking. Therefore, HTTP/1.0 and HTTP/1.1 clients that need to make many requests use multiple connections to a server</description></item><item><title>HTTP：URI与资源</title><link>https://zhannicholas.github.io/posts/computer_networks/http/uri_and_resources/</link><pubDate>Sun, 13 Dec 2020 17:25:35 +0800</pubDate><guid>https://zhannicholas.github.io/posts/computer_networks/http/uri_and_resources/</guid><description>Web资源 Web资源（Web resource），或资源（resource）是一个非常宽泛的概念，它代表一个可以被识别的东西。WikiPedi</description></item><item><title>HTTP：代理</title><link>https://zhannicholas.github.io/posts/computer_networks/http/proxies/</link><pubDate>Sun, 13 Dec 2020 17:19:57 +0800</pubDate><guid>https://zhannicholas.github.io/posts/computer_networks/http/proxies/</guid><description>Web代理（Proxy） 服务器是网络中的中间实体，位于客户端与服务器之间，扮演的是“中间人”的角色，负责在各端点之间来回传送HTTP报文。 W</description></item><item><title>HTTP：报文结构</title><link>https://zhannicholas.github.io/posts/computer_networks/http/http_messages/</link><pubDate>Sun, 13 Dec 2020 17:15:44 +0800</pubDate><guid>https://zhannicholas.github.io/posts/computer_networks/http/http_messages/</guid><description>用于HTTP协议交互的信息被称为HTTP报文（HTTP Messages）。客户端发出的HTTP叫做请求报文（或Requests），服务端发出</description></item><item><title>HTTP：认证</title><link>https://zhannicholas.github.io/posts/computer_networks/http/http_authentication/</link><pubDate>Sun, 13 Dec 2020 17:14:07 +0800</pubDate><guid>https://zhannicholas.github.io/posts/computer_networks/http/http_authentication/</guid><description>Web连接着不计其数的资源，但并不是所有的资源都是可以随意访问的。某些资源只对部分特定的用户开放，为了达到这个目的，需要对用户进行认证（au</description></item><item><title>HTTP：网关、隧道和中继</title><link>https://zhannicholas.github.io/posts/computer_networks/http/gateway_tunnels_and_relays/</link><pubDate>Sun, 13 Dec 2020 17:07:48 +0800</pubDate><guid>https://zhannicholas.github.io/posts/computer_networks/http/gateway_tunnels_and_relays/</guid><description>Web上所有的资源都可以使用HTTP协议，并且其它应用和应用协议也可以利用HTTP来完成它们的任务。开发者可以将HTTP作为一个框架来使用其</description></item><item><title>HTTP：连接管理</title><link>https://zhannicholas.github.io/posts/computer_networks/http/connection_management/</link><pubDate>Sun, 13 Dec 2020 17:05:53 +0800</pubDate><guid>https://zhannicholas.github.io/posts/computer_networks/http/connection_management/</guid><description>HTTP连接是HTTP报文传输的关键通道。 TCP连接 TCP/IP是全球计算机及网络设备都在使用的一个分层包交换协议集，几乎所有的HTTP通信</description></item><item><title>HTTP：客户端身份识别与Cookie</title><link>https://zhannicholas.github.io/posts/computer_networks/http/client_certification_and_cookies/</link><pubDate>Sun, 13 Dec 2020 16:59:47 +0800</pubDate><guid>https://zhannicholas.github.io/posts/computer_networks/http/client_certification_and_cookies/</guid><description>HTTP 最初是一个匿名、无状态的请求/响应协议。服务器接收客户端请求，处理并回送响应，Web 服务器几乎没有什么信息可以用来判断请求来自于哪个用户。</description></item></channel></rss>