<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>并发 on Nicholas Zhan</title><link>https://zhannicholas.github.io/tags/%E5%B9%B6%E5%8F%91/</link><description>Recent content in 并发 on Nicholas Zhan</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Wed, 01 Sep 2021 09:46:58 +0800</lastBuildDate><atom:link href="https://zhannicholas.github.io/tags/%E5%B9%B6%E5%8F%91/index.xml" rel="self" type="application/rss+xml"/><item><title>Java 中的原子类</title><link>https://zhannicholas.github.io/java/concurrency/java_atomic_variables/</link><pubDate>Wed, 01 Sep 2021 09:46:58 +0800</pubDate><guid>https://zhannicholas.github.io/java/concurrency/java_atomic_variables/</guid><description>一谈到原子类（或原子变量），我们可能就会想知道它和我们编程中常说的原子性（Atomicy）之间是否有关系。若一组操作具备“要么全部成功，要么</description></item><item><title>Java 中的并发队列</title><link>https://zhannicholas.github.io/java/concurrency/java_concurrent_queue/</link><pubDate>Tue, 31 Aug 2021 21:11:09 +0800</pubDate><guid>https://zhannicholas.github.io/java/concurrency/java_concurrent_queue/</guid><description>并发队列（或线程安全的队列）是在我们在进行多线程并发编程时经常使用的一种数据结构。并发队列不仅具备基本队列的所有特性，还是线程安全的。由于并</description></item><item><title>线程安全</title><link>https://zhannicholas.github.io/java/concurrency/thread_safety/</link><pubDate>Tue, 27 Apr 2021 20:38:39 +0800</pubDate><guid>https://zhannicholas.github.io/java/concurrency/thread_safety/</guid><description>我们在工作中经常听人提起线程安全，但要是被问到什么是线程安全，我们可能就会挠挠脑袋了。因为线程安全并没有一个明确的定义。Java Concurrency in Practice 这本 Java</description></item><item><title>Java 线程池</title><link>https://zhannicholas.github.io/java/concurrency/java_thread_pool/</link><pubDate>Sun, 13 Dec 2020 18:35:11 +0800</pubDate><guid>https://zhannicholas.github.io/java/concurrency/java_thread_pool/</guid><description>线程池是管理一组同构工作线程的资源池，内部主要分为四部分： 线程池管理器：负责线程池的创建、销毁、添加任务等管理工作。 工作队列（Work Que</description></item><item><title>Java 线程</title><link>https://zhannicholas.github.io/java/concurrency/java_thread/</link><pubDate>Sun, 13 Dec 2020 18:32:20 +0800</pubDate><guid>https://zhannicholas.github.io/java/concurrency/java_thread/</guid><description>进程（process）是资源分配的基本单元，而线程（thread）是程序执行的基本单元。一个进程可以包含多个线程，多个线程之间共享进程的资源</description></item><item><title>Java 中的 synchronized</title><link>https://zhannicholas.github.io/java/concurrency/synchronization/</link><pubDate>Sun, 13 Dec 2020 18:31:16 +0800</pubDate><guid>https://zhannicholas.github.io/java/concurrency/synchronization/</guid><description>Java语言提供了多种线程间通信机制（同步、while轮询、等待/通知、管道等等），其中最基础的通信方式就是 同步（synchronizati</description></item><item><title>锁</title><link>https://zhannicholas.github.io/java/concurrency/locks/</link><pubDate>Sun, 13 Dec 2020 18:29:44 +0800</pubDate><guid>https://zhannicholas.github.io/java/concurrency/locks/</guid><description>文章中涉及的源代码摘自 OpenJdk 11。 乐观锁与悲观锁 乐观锁与悲观锁是一种广义上的概念，体现了我们看待线程同步的不同角度。 乐观锁 乐观锁采用的思想是：冲</description></item></channel></rss>