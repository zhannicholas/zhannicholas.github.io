<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>JDBC on 's Digital Garden</title><link>https://zhannicholas.github.io/tags/jdbc/</link><description>Recent content in JDBC on 's Digital Garden</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sun, 18 Apr 2021 23:00:39 +0800</lastBuildDate><atom:link href="https://zhannicholas.github.io/tags/jdbc/index.xml" rel="self" type="application/rss+xml"/><item><title>JDBC</title><link>https://zhannicholas.github.io/posts/java/jdbc/jdbc/</link><pubDate>Sun, 18 Apr 2021 23:00:39 +0800</pubDate><guid>https://zhannicholas.github.io/posts/java/jdbc/jdbc/</guid><description>JDBC（Java DataBase Connectivity）是 Java 程序与关系型数据库交互的统一 API，它由两部分 API 组成：
面向 Java 开发者的 Java API，这一部分 API 独立于各个数据库产品的接口规范，是标准又统一的 Java　API。 面向数据库驱动程序开发者的 API，由数据库厂商实现，用于连接具体的数据库产品。 使用 JDBC 操作数据库的核心步骤 在实际开发 Java 程序时，我们可以通过 JDBC 连接到数据库，完成各种数据库操作。以下就是执行 SELECT 语句时发生的 JDBC 操作：
注册数据库驱动类，给出数据库连接信息（数据库地址、用户名、密码等） 创建 Connection 连接到数据库（调用 DriverManager.getConnection() 方法） 创建 Statement 对象（调用 Connection 的 createStatement() 或 prepareStatement() 方法） 通过 Statement 对象执行 SQL，得到 ResultSet 对象（查询结果集） 从 ResultSet 中读取数据 关闭 ResultSet、Statement 及 Connection 对象 数据库连接池 为什么要使用数据库连接池？数据库连接是整个服务中比较珍贵的资源之一，因为建立数据库连接涉及鉴权、握手等一系列网络操作。使用池化技术缓存数据库连接带来的好处还有很多，例如：
实现连接重用，从而提高系统的响应速度 控制数据库连接数量上限，防止连接过多造成数据库假死 统一连接管理，避免连接泄漏 连接池的连接数量上限一定要根据实际情况仔细选取。如果设置得过大，可能导致数据库因连接过多而假死或崩溃，从而影响服务的可用性。如果设置得过小，则可能无法让数据库达到最佳性能，造成资源浪费。
ORM 框架 ORM 框架的核心功能是：根据配置（一般是配置文件或者 Java 注解）实现对象模型（Java 程序）与关系模型（数据库）之间的映射。</description></item></channel></rss>