<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Java on NZ's Digital Garden</title><link>https://zhannicholas.github.io/categories/java/</link><description>Recent content in Java on NZ's Digital Garden</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sun, 18 Jun 2023 20:30:41 +0800</lastBuildDate><atom:link href="https://zhannicholas.github.io/categories/java/index.xml" rel="self" type="application/rss+xml"/><item><title>JVM 参数：`-D`、`-X`、`-XX`，傻傻分不清？</title><link>https://zhannicholas.github.io/posts/java/jvm/java_options_d_x_xx/</link><pubDate>Sun, 18 Jun 2023 20:30:41 +0800</pubDate><guid>https://zhannicholas.github.io/posts/java/jvm/java_options_d_x_xx/</guid><description>JVM 参数众多，我们常在启动一个 Java 程序时通过命令行（例如：java -jar app.jar）指定各种参数选项。很多同学就会对此感到疑惑，为什么有时候要用</description></item><item><title>Java 中的原子类</title><link>https://zhannicholas.github.io/posts/java/concurrency/java_atomic_variables/</link><pubDate>Wed, 01 Sep 2021 09:46:58 +0800</pubDate><guid>https://zhannicholas.github.io/posts/java/concurrency/java_atomic_variables/</guid><description>一谈到原子类（或原子变量），我们可能就会想知道它和我们编程中常说的原子性（Atomicy）之间是否有关系。若一组操作具备“要么全部成功，要么</description></item><item><title>Java 中的并发队列</title><link>https://zhannicholas.github.io/posts/java/concurrency/java_concurrent_queue/</link><pubDate>Tue, 31 Aug 2021 21:11:09 +0800</pubDate><guid>https://zhannicholas.github.io/posts/java/concurrency/java_concurrent_queue/</guid><description>并发队列（或线程安全的队列）是在我们在进行多线程并发编程时经常使用的一种数据结构。并发队列不仅具备基本队列的所有特性，还是线程安全的。由于并</description></item><item><title>Java 中的 hashCode() 与 equals()</title><link>https://zhannicholas.github.io/posts/java/lang/java-hashcode-equals-contracts/</link><pubDate>Fri, 27 Aug 2021 22:22:46 +0800</pubDate><guid>https://zhannicholas.github.io/posts/java/lang/java-hashcode-equals-contracts/</guid><description>有一道经典的 Java 面试题叫：重写了 equals()，为什么还要重写 hashCode()？ 不幸的是，笔者最近也被问到这个问题的变种了。当时面试官的</description></item><item><title>线程安全</title><link>https://zhannicholas.github.io/posts/java/concurrency/thread_safety/</link><pubDate>Tue, 27 Apr 2021 20:38:39 +0800</pubDate><guid>https://zhannicholas.github.io/posts/java/concurrency/thread_safety/</guid><description>我们在工作中经常听人提起线程安全，但要是被问到什么是线程安全，我们可能就会挠挠脑袋了。因为线程安全并没有一个明确的定义。Java Concurrency in Practice 这本 Java</description></item><item><title>Java 对象的一生</title><link>https://zhannicholas.github.io/posts/java/jvm/java_object_lifecycle/</link><pubDate>Wed, 21 Apr 2021 23:30:52 +0800</pubDate><guid>https://zhannicholas.github.io/posts/java/jvm/java_object_lifecycle/</guid><description>The Truth About Garbage Collection 这篇文章写得挺好的，本文的很多内容也是基于这篇文章而来。 Java 是一门面向对象的编程语言，在程序的运行过程中，不断有新的对象被创建出来，</description></item><item><title>Java 中的引用与对象可达性</title><link>https://zhannicholas.github.io/posts/java/lang/references_and_reachability_in_java/</link><pubDate>Tue, 20 Apr 2021 21:40:00 +0800</pubDate><guid>https://zhannicholas.github.io/posts/java/lang/references_and_reachability_in_java/</guid><description>JDK 1.2 之后，Java 将引用分为强引用（Strongly Reference）、软引用（Soft Reference）、弱引用（Weak Refere</description></item><item><title>JDBC</title><link>https://zhannicholas.github.io/posts/java/jdbc/jdbc/</link><pubDate>Sun, 18 Apr 2021 23:00:39 +0800</pubDate><guid>https://zhannicholas.github.io/posts/java/jdbc/jdbc/</guid><description>JDBC（Java DataBase Connectivity）是 Java 程序与关系型数据库交互的统一 API，它由两部分 API 组成： 面向 Java 开发者的 Java API，这一部分 API 独</description></item><item><title>HotSpot VM中的内存管理(J2SE 5.0)</title><link>https://zhannicholas.github.io/posts/java/jvm/memory_management_in_javase5/</link><pubDate>Sun, 13 Dec 2020 18:44:54 +0800</pubDate><guid>https://zhannicholas.github.io/posts/java/jvm/memory_management_in_javase5/</guid><description>这篇笔记的主要内容来自Memory Management in the Java HotSpot VM 。其主要讲的是J2SE 5.0中HotSpot VM的内存管理，文章中描述了J2SE5.0中的垃圾</description></item><item><title>HotSpot引擎架构</title><link>https://zhannicholas.github.io/posts/java/jvm/hotspot_engine_architecture/</link><pubDate>Sun, 13 Dec 2020 18:43:36 +0800</pubDate><guid>https://zhannicholas.github.io/posts/java/jvm/hotspot_engine_architecture/</guid><description>这篇笔记主要来自于The Java HotSpot Performance Engine Architecture ，感觉主要是在讲 JDK8中 HotSpot VM 的整体架构。 Java HotSpot VM 原来是 Sun 公司为 Java 平台实现的高性能虚拟机，是 Java SE 的基础组成部</description></item></channel></rss>