<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Notebook on 's Digital Garden</title><link>https://zhannicholas.github.io/categories/notebook/</link><description>Recent content in Notebook on 's Digital Garden</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Mon, 22 Mar 2021 23:58:56 +0800</lastBuildDate><atom:link href="https://zhannicholas.github.io/categories/notebook/index.xml" rel="self" type="application/rss+xml"/><item><title>Mybatis</title><link>https://zhannicholas.github.io/notes/mybatis/</link><pubDate>Mon, 22 Mar 2021 23:58:56 +0800</pubDate><guid>https://zhannicholas.github.io/notes/mybatis/</guid><description>本文的绝大部分内容来自某网课，做笔记备忘，便于以后碰到相关问题更快地定位和排查问题。
MyBatis 三层架构 MyBatis 的整体架构分为三层，分别是：基础支撑层、逻辑处理层 和 接口层。
基础支撑层 基础支撑层为整个 MyBatis 框架提供最基础的功能，分为九个基础模块，每个模块都具有各自不同的能力。
类型转换模块 在使用 JDBC 操作数据库时，我们面临着三个不同层次的数据类型差异——数据库自己的数据类型、JDBC 定义的数据类型和 Java 数据类型。JDBC 在中间，作为规范标准，它可以屏蔽底层数据的差异，但 JDBC 类型与 Java 类型并不是一一对应的，所以需要进行适当的类型转换。
JDBC Spec 4.2 中定义了 JDBC 类型到 Java 类型的映射关系、Java 类型到 JDBC 类型的映射关系等等。
类型转换模块实现了 MyBatis 中定义的 JDBC 类型与 Java 类型之间的相互转换：
当 MyBatis 在将 SQL 模板与用户传入的参数相绑定（在我们使用 PreparedStatement 执行 SQL 之前，需要手动调用 setInt()、setString() 等方法绑定参数）时，类型转换模块会将 Java 类型数据转换为 JDBC 类型数据。 当取得查询结果后，类型转换模块会将 ResultSet 中的 JDBC 类型数据转换为 Java 类型数据。 此外，类型转换模块还实现了别名的功能。我们可以在 mybatis-config.xml 配置文件中使用 &amp;lt;typeAlias&amp;gt; 标签为 Java 类的完整名称定义相应的别名。然后在后续编写 SQL 语句、定义 &amp;lt;resultMap&amp;gt; 的时候，就可以直接使用这些别名替代相应的 Java 类名，这样就非常易于代码的编写和维护。TypeAliasRegistry 是维护别名配置的核心实现，它提供了别名注册、别名查询等基本功能。</description></item></channel></rss>