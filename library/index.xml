<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Libraries on 's Digital Garden</title><link>https://zhannicholas.github.io/library/</link><description>Recent content in Libraries on 's Digital Garden</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Tue, 07 Dec 2021 20:00:10 +0800</lastBuildDate><atom:link href="https://zhannicholas.github.io/library/index.xml" rel="self" type="application/rss+xml"/><item><title>Notes from Java Performance</title><link>https://zhannicholas.github.io/library/java_performance/</link><pubDate>Tue, 07 Dec 2021 20:00:10 +0800</pubDate><guid>https://zhannicholas.github.io/library/java_performance/</guid><description>Notes from Java Performance, 2nd Edition by Scott Oaks. Fundamentals To be a good Java Performance engineer, we need some specific knowledge. This knowledge falls into two broad categories: The performance of the Java Virtual Machine (JVM) itself: the way that the JVM is configured affects many aspects of a program’s performance. To understand how the features of the Java platform affect</description></item><item><title>Operating System: The Three Pieces</title><link>https://zhannicholas.github.io/library/ostep/</link><pubDate>Sun, 14 Mar 2021 23:03:01 +0800</pubDate><guid>https://zhannicholas.github.io/library/ostep/</guid><description>在我读过的写操作系统的书里，这应该是写得最好的了。本书的内容很好的体现了书名中“Three Easy Pieces”的思想，“Three Easy Pieces</description></item><item><title>《超级搜索术》读书笔记</title><link>https://zhannicholas.github.io/library/%E8%B6%85%E7%BA%A7%E6%90%9C%E7%B4%A2%E6%9C%AF/</link><pubDate>Mon, 08 Mar 2021 23:09:31 +0800</pubDate><guid>https://zhannicholas.github.io/library/%E8%B6%85%E7%BA%A7%E6%90%9C%E7%B4%A2%E6%9C%AF/</guid><description>人生中 99% 的问题早已有答案，你只要搜索就好。只要你去搜索，就能一直站在巨人的肩膀上去寻求新突破，做出微创新。 ——朱丹 前言 朱丹老师的《超级搜索术</description></item><item><title>《现代操作系统》读书笔记</title><link>https://zhannicholas.github.io/library/modern_operating_systems/</link><pubDate>Sun, 13 Dec 2020 19:56:36 +0800</pubDate><guid>https://zhannicholas.github.io/library/modern_operating_systems/</guid><description>多处理机系统 从计算机诞生之日起，人们就无休止地追求着更强大地计算能力。过去地解决方案是使时钟走得更快，但是现在时钟速度已经很难再进一步提升了</description></item><item><title>Design concepts for engineers</title><link>https://zhannicholas.github.io/library/design_concepts_for_engineers/</link><pubDate>Sun, 13 Dec 2020 19:52:15 +0800</pubDate><guid>https://zhannicholas.github.io/library/design_concepts_for_engineers/</guid><description>Taken from Design Concepts for Engineers (Fifth Edition) 2020.11.22 第1章 工程是什么 作为一名有抱负的工程师，你有很多需要学习的东西。你必须掌握工程的基础知识：数学、物理、化学和生物。你必须学</description></item><item><title>《设计模式的艺术》读书笔记</title><link>https://zhannicholas.github.io/library/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%9A%84%E8%89%BA%E6%9C%AF/</link><pubDate>Mon, 01 Oct 2018 13:28:15 +0800</pubDate><guid>https://zhannicholas.github.io/library/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%9A%84%E8%89%BA%E6%9C%AF/</guid><description>单例模式 单例模式(Singleton Pattern)：确保某一个类只有一个实例，而且自行实例化并向整个系统提供这个实例，这个类就是单例类。 从</description></item><item><title>《C 算法》读书笔记</title><link>https://zhannicholas.github.io/library/algorithms_in_c/</link><pubDate>Sat, 02 Jun 2018 10:07:28 +0800</pubDate><guid>https://zhannicholas.github.io/library/algorithms_in_c/</guid><description>二叉树 树是满足一定要求的顶点和边的非空集合。二叉树的每个节点至多有2个子节点。 一种表示方法： struct Node{type key; Node *lchild, *richild;} typedef Node *link; 这种表示方法只适合从根节点开始</description></item></channel></rss>